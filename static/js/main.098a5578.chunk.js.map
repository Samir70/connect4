{"version":3,"sources":["Components/Gameboard.js","Components/Congrats.js","Modules/BoardHandler.js","App.js","serviceWorker.js","index.js"],"names":["Gameboard","props","board","pos","join","split","map","x","i","c","cl","k","react_default","a","createElement","className","key","onClick","click","makeTile","splice","Congrats","side","startPos","legalMoves","sideToMove","outCome","makeMove","position","move","moveToMake","lMoves","Object","toConsumableArray","boardArray","b","m","maxRow","push","maxCol","posDiag","negDiag","maxLine","Math","max","length","console","log","checkWinning","outBoard","App","state","boardPos","moveHandler","currentPos","assign","_this","result","setState","restartGame","moveCol","this","src_Components_Gameboard","src_Components_Congrats","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.098a5578.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Gameboard.css';\r\n\r\nconst Gameboard = (props) => {\r\n    const makeTile = (c, i) => {\r\n        var cl = '';\r\n        var k = 'sq'+i;\r\n        switch (c) {      \r\n          case 'Y' : {cl = 'yellow'; break}\r\n          case 'R' : {cl = 'red'; break}\r\n          case 'L' : {cl = 'legal'; break}\r\n          default : {cl = 'black'}\r\n        }\r\n        return <td className={cl} key = {k} onClick={()=>props.click(i)} ></td>\r\n    }\r\n    var board = props.pos.join('').split('').map((x, i) => makeTile(x, i))\r\n\r\n    return (\r\n        <div>\r\n          <table className=\"gameBoard\" >\r\n              <tbody>\r\n                <tr>{board.splice(0, 7)}</tr>                \r\n                <tr>{board.splice(0, 7)}</tr>                \r\n                <tr>{board.splice(0, 7)}</tr>                \r\n                <tr>{board.splice(0, 7)}</tr>                \r\n                <tr>{board.splice(0, 7)}</tr>                \r\n                <tr>{board.splice(0, 7)}</tr>                \r\n                <tr>{board.splice(0, 7)}</tr>                \r\n              </tbody>\r\n          </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gameboard;","import React from 'react';\r\nimport './Congrats.css';\r\n\r\nconst Congrats = (props) => {\r\n    return (\r\n    <div className='winAppear' >\r\n        <p className='fancyText' >{props.side} <br />has<br />won!!!!!!!!</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Congrats;","\r\n// board positions will have these properties:\r\n// pos: the colour of each square\r\n// 6 rows of 7\r\n// B - for blank (or black)\r\n// Y, R -- for yellow or red\r\n// L - for legal moves, which (during development) are coloured gray\r\n\r\n// legalMoves: moves which can be made in this position\r\n// sideToMove: either 'Yellow' or 'Red'\r\n// outCome: described as 'win', 'draw', 'onGoing'\r\nexport const startPos = {    \r\n    pos: [\r\n        'BBBBBBB',\r\n        'BBBBBBB',\r\n        'BBBBBBB',\r\n        'BBBBBBB',\r\n        'BBBBBBB',\r\n        'LLLLLLL'\r\n    ], \r\n    legalMoves: [35, 36, 37, 38, 39, 40, 41], \r\n    sideToMove: 'Yellow', \r\n    outCome: 'onGoing'\r\n}\r\n\r\nconst checkWinning = (b, m) => {\r\n    var maxRow = [m];\r\n    var c = m-1;\r\n    while (b[c]===b[m]  && c%7 !== 6) {maxRow.push(c); c--}\r\n    c = m+1;\r\n    while (b[c]===b[m]  && c%7 !== 0) {maxRow.push(c); c++}\r\n    \r\n    var maxCol = [m];\r\n    c= m-7;\r\n    while (b[c]===b[m]  && c>=0) {maxCol.push(c); c -= 7}\r\n    c=m+7;\r\n    while (b[c]===b[m]  && c<=41) {maxCol.push(c); c += 7}\r\n    \r\n    var posDiag = [m]; //positive gradient!!\r\n    c = m+6;\r\n    while (b[c]===b[m]  && c<=41 && c%7 !== 6) {posDiag.push(c); c += 6}\r\n    c = m-6;\r\n    while (b[c]===b[m]  && c>0 && c%7 !== 0) {posDiag.push(c); c -= 6}\r\n\r\n    var negDiag = [m]; //negative gradient!!\r\n    c = m+8;\r\n    while (b[c]===b[m]  && c<=41 && c%7 !== 0) {negDiag.push(c); c += 8}\r\n    c = m-8;\r\n    while (b[c]===b[m]  && c>=0 && c%7 !== 6) {negDiag.push(c); c -= 8}\r\n\r\n    var maxLine = Math.max(maxRow.length, maxCol.length, posDiag.length, negDiag.length);\r\n    console.log('maxRow, maxCol, posDiag, negDiag', maxRow, maxCol, posDiag, negDiag);\r\n    return maxLine > 3 ? true : false;\r\n}\r\n\r\n\r\nexport const makeMove = (position, move) => {\r\n    const moveToMake = position.legalMoves[move%7];\r\n    var lMoves = [...position.legalMoves]\r\n    if (moveToMake >= 0) {\r\n        var boardArray = position.pos.join('').split('');\r\n        boardArray[moveToMake] = position.sideToMove[0];\r\n        lMoves[move%7] -= 7;\r\n        if (lMoves[move%7] >= 0) {\r\n            boardArray[lMoves[move%7]] = 'L'\r\n        }\r\n\r\n        if (checkWinning(boardArray, moveToMake)) {\r\n            position.outCome = 'win';\r\n            lMoves = lMoves.map(x=>-1);\r\n        } else {position.sideToMove = position.sideToMove === 'Yellow' ? 'Red' : 'Yellow';}\r\n\r\n        //Now turn our board back into 6 rows of seven\r\n        // then create an object to return and pass to setState\r\n        var outBoard = [];\r\n        while (boardArray.length > 0) {outBoard.push(boardArray.splice(0, 7).join(''))}\r\n        position.pos = outBoard;\r\n        position.legalMoves = lMoves;\r\n\r\n\r\n        return position;\r\n    } else {return 'NOT LEGAL'}    \r\n}","import React from 'react';\r\nimport Gameboard from './Components/Gameboard';\r\nimport Congrats from './Components/Congrats'\r\nimport {startPos, makeMove} from './Modules/BoardHandler';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    boardPos : startPos\r\n  }\r\n\r\n  moveHandler = (move) => {\r\n    var currentPos = Object.assign({}, this.state.boardPos);\r\n    var result = makeMove(currentPos, move);\r\n    if (result === 'NOT LEGAL') {\r\n      console.log('need better illegal move notification')\r\n    } else {\r\n      this.setState({boardPos: result});\r\n    }\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({boardPos : startPos})\r\n  }\r\n\r\n  render() {\r\n    var moveCol = this.state.boardPos.sideToMove === 'Yellow' ? 'yellowToPlay' : 'redToPlay';\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className={moveCol}>CONNECT -- 4</h1>\r\n        <Gameboard pos={this.state.boardPos.pos} click={this.moveHandler} />\r\n        <button className='restartBtn' onClick={this.restartGame} >New Game</button>\r\n        {this.state.boardPos.outCome === 'win' && <Congrats side = {this.state.boardPos.sideToMove} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}